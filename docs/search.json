[{"path":"index.html","id":"annotations","chapter":"1 Annotations","heading":"1 Annotations","text":"","code":""},{"path":"index.html","id":"setup","chapter":"1 Annotations","heading":"1.1 Setup","text":"","code":"\nlibrary(tidyverse)"},{"path":"index.html","id":"set-variables","chapter":"1 Annotations","heading":"1.2 Set variables","text":"","code":"\nSIGS = list(\"/hps/nobackup/birney/users/ian/MIKK_HMM/sig_snps/hdrr/dist_angle/dist_angle/15/5000/0.8/invnorm/open_field_sigs.csv\",\n            \"/hps/nobackup/birney/users/ian/MIKK_HMM/sig_snps/hdrr/dist_angle/dist_angle/15/5000/0.8/invnorm/novel_object_sigs.csv\")\nnames(SIGS) = c(\"open_field\", \"novel_object\")\nVEP = list(here::here(\"results/annotations/hdrr/dist_angle/dist_angle/15/5000/0.8/invnorm/open_field_vep_out.txt\"),\n           here::here(\"results/annotations/hdrr/dist_angle/dist_angle/15/5000/0.8/invnorm/novel_object_vep_out.txt\"))\nnames(VEP) = c(\"open_field\", \"novel_object\")"},{"path":"index.html","id":"read-in-files","chapter":"1 Annotations","heading":"1.3 Read in files","text":"","code":"\nsigs = purrr::map_dfr(SIGS, ~readr::read_csv(.x,\n                                             col_types = c(\"ccdddcccccdddd\")),\n                      .id = \"ASSAY\")\n\nvep = purrr::map_dfr(VEP, ~readr::read_tsv(.x, comment = \"##\") %>% \n                      dplyr::rename(\"Uploaded_variation\" = \"#Uploaded_variation\"),\n                    .id = \"ASSAY\") %>% \n  # split `Uploaded_variation` into CHROM, POS, REF, ALT\n  tidyr::separate(col = \"Uploaded_variation\",\n                  into = c(\"CHROM\", \"POS\", \"ALLELES\"),\n                  sep = \"_\") %>% \n  tidyr::separate(col = \"ALLELES\",\n                  into = c(\"REF\", \"ALT\"),\n                  sep = \"/\") %>% \n  # conver CHROM to integer\n  dplyr::mutate(CHROM = as.integer(CHROM),\n                POS = as.integer(POS))"},{"path":"index.html","id":"within-each-assay-are-there-any-snps-that-are-shared-across-dgesge","chapter":"1 Annotations","heading":"1.4 Within each assay, are there any SNPs that are shared across DGE/SGE?","text":"","code":"\nsplit_sigs = sigs %>% \n  split(., f = .$ASSAY) %>% \n  purrr::map(., ~split(.x, f = .x$DGE_SGE))\n\n# Any shared for open field?\nwhich(split_sigs$open_field$dge %in% split_sigs$open_field$sge)\n#> integer(0)\n\n# Any shared for novel object?\nwhich(split_sigs$novel_object$dge %in% split_sigs$novel_object$sge)\n#> integer(0)"},{"path":"index.html","id":"greedily-filter-snps","chapter":"1 Annotations","heading":"1.5 Greedily filter SNPs","text":"","code":"\nWINDOW_LEN = 1e5\n\n# Function for greedy filtering\ngreedy_drop = function(df){\n  # sort `df` by p-value\n  df = df %>% \n    dplyr::arrange(p)\n  # add first row (lowest p-value) to output\n  out = df[1, ]\n  # for all other rows...\n  if (nrow(df) > 1){\n    for (i in 2:nrow(df)){\n      # if its absolute bp distance from any other kept SNP is greater than the window length\n      if (min(abs(df[[i,\"POS\"]] - out$POS)) > WINDOW_LEN){\n        # add that row to the output\n        out = out %>% \n          tibble::add_row(df[i, ])\n      }\n    }    \n  }\n  return(out)\n}\n\n# Apply function to each combination\ngreedy_kept = split(sigs, ~ASSAY + DGE_SGE + STATE + CHROM) %>% \n  purrr::map(~ .x %>% \n               dplyr::arrange(p)) %>% \n  # drop empty data frames\n  purrr::discard(~nrow(.x) == 0) %>% \n  purrr::map_dfr(~greedy_drop(.x))\n  "},{"path":"index.html","id":"join-sigs-to-vep","chapter":"1 Annotations","heading":"1.6 Join sigs to vep","text":"","code":"\nall_vep = sigs %>% \n  dplyr::full_join(vep,\n                    by = c(\"ASSAY\", \"CHROM\", \"POS\", \"REF\", \"ALT\")) %>% \n  # remove unnecessary columns\n  dplyr::select(-c(Location, cDNA_position, CDS_position, Protein_position, Amino_acids, Codons, Existing_variation))\n\n# Check whether they have REF/ALT in the right order\n\ngreedy_vep = greedy_kept %>% \n  dplyr::full_join(vep,\n                    by = c(\"ASSAY\", \"CHROM\", \"POS\", \"REF\", \"ALT\")) %>% \n  # remove unnecessary columns\n  dplyr::select(-c(Location, cDNA_position, CDS_position, Protein_position, Amino_acids, Codons, Existing_variation))"},{"path":"index.html","id":"get-hgnc-gene-names-from-biomart","chapter":"1 Annotations","heading":"1.7 Get HGNC gene names from biomaRt","text":"","code":"\nolat_mart = biomaRt::useEnsembl(biomart = \"ensembl\", dataset = \"olatipes_gene_ensembl\", mirror = \"uswest\")\n\nolat_attr = biomaRt::listAttributes(olat_mart)\n\nolat_genes = biomaRt::getBM(attributes = c(\"ensembl_gene_id\",\n                                           \"hgnc_symbol\",\n                                           \"description\"),\n                            mart = olat_mart) \n\nolat_homs = biomaRt::getBM(attributes = c(\"ensembl_gene_id\",\n                                          \"hsapiens_homolog_associated_gene_name\"),\n                           mart = olat_mart) \n                                           \n\n# Bind to all_vep and greedy_vep\nfinal_all = dplyr::left_join(all_vep,\n                             olat_genes,\n                             by = c(\"Gene\" = \"ensembl_gene_id\")) %>% \n  dplyr::left_join(olat_homs,\n                   by = c(\"Gene\" = \"ensembl_gene_id\"))\n\nfinal_greedy = dplyr::left_join(greedy_vep,\n                                olat_genes,\n                                by = c(\"Gene\" = \"ensembl_gene_id\")) %>% \n  dplyr::left_join(olat_homs,\n                   by = c(\"Gene\" = \"ensembl_gene_id\"))"},{"path":"index.html","id":"view-results","chapter":"1 Annotations","heading":"1.8 View results","text":"","code":""},{"path":"index.html","id":"all-snps","chapter":"1 Annotations","heading":"1.8.1 All SNPs","text":"","code":"\n# Counts for different consequences\nfinal_all %>% \n  dplyr::count(Consequence) %>% \n  DT::datatable(.)"},{"path":"index.html","id":"greedy-snps","chapter":"1 Annotations","heading":"1.8.2 Greedy SNPs","text":"","code":"\n# Counts for different consequences\nfinal_greedy %>% \n  dplyr::count(Consequence) %>% \n  DT::datatable(.)"}]
