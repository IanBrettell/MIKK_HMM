include: "rules/00_common.smk"
include: "rules/01_ref.smk"
include: "rules/01_setup.smk"
#include: "rules/02_param_optim.smk"
include: "rules/03_mapping.smk"
include: "rules/04_F2_loci.smk"
include: "rules/05_F2_calling.smk"
include: "rules/05_KCC_calling.smk"

##### Target rules #####

rule all:
    input:
######################
## 01_ref.smk
######################
        rules.get_genome.output,
        rules.genome_faidx.output,
        rules.genome_dict.output,
        rules.bwa_mem2_index.output,
        rules.get_chrom_lengths.output,
######################
## 01_setup.smk
######################
        expand(rules.merge_datasets.output,
                interval = config["seconds_interval"]
        ),
        expand(rules.run_hmm.output,
                interval = config["seconds_interval"],
                variables = config["hmm_variables"],
                n_states = config["n_states"]
        ),
        expand(rules.split_datasets.output,
                interval = config["seconds_interval"],
                variables = config["hmm_variables"],
                n_states = config["n_states"]
        ),
        expand(rules.hmm_concordance_in.output,
                interval = config["seconds_interval"],
                variables = config["hmm_variables"],
        ),
        expand(rules.hmm_concordance_out.output,
                interval = config["seconds_interval"],
                variables = config["hmm_variables"],
                n_states = config["n_states"]
        ),
######################
## 03_mapping.smk
######################
#        expand(rules.create_seq_sample_file.output,
#                run = config["runs"]
#        ),
#        expand(rules.samtools_index.output,
#                sample = SAMPLES
#        ),
######################
## 04_F2_loci.smk
######################
        expand(rules.extract_parental_snps.output,
                zip,
                pat = PAT_UQ,
                mat = MAT_UQ
        ),
        expand(rules.extract_homo_div_snps.output,
                zip,
                pat = PAT_UQ,
                mat = MAT_UQ
        ),
######################
## 05_F2_calling.smk
######################
        expand(rules.bam_readcount_F2.output,
                zip,
                sample = SAMPLES_ZIP,
                pat = PAT_ZIP,
                mat = MAT_ZIP
        ),
        expand(rules.make_hmm_input.output,
                max_reads = "None",
                bin_length = config["bin_length"]
        ),
######################
## 05_KCC_calling.smk
######################
        expand(rules.merge_variants.output),