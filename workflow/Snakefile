include: "rules/00_common.smk"
include: "rules/01_ref.smk"
include: "rules/01_hmm.smk"
include: "rules/02_param_optim.smk"
include: "rules/03_mapping.smk"
include: "rules/04_F2_loci.smk"
include: "rules/05_F2_calling.smk"
include: "rules/05_KCC_calling.smk"
include: "rules/06_F0_state_freq.smk"
include: "rules/06_F2_state_freq.smk"
include: "rules/07_GCTA_state_freq.smk"
include: "rules/08_figs.smk"

##### Target rules #####

rule all:
    input:
######################
## 00_common.smk
######################
        rules.get_line_ranks_and_colours.output,
######################
## 01_ref.smk
######################
#        rules.get_genome.output,
#        rules.genome_faidx.output,
#        rules.genome_dict.output,
#        rules.bwa_mem2_index.output,
#        rules.get_chrom_lengths.output,
#######################
### 01_hmm.smk
#######################
#        expand(rules.merge_datasets.output,
#                interval = config["seconds_interval"]
#        ),
#        expand(rules.run_hmm.output,
#                interval = config["seconds_interval"],
#                variables = config["hmm_variables"],
#                n_states = config["n_states"]
#        ),
#        expand(rules.split_datasets.output,
#                interval = config["seconds_interval"],
#                variables = config["hmm_variables"],
#                n_states = config["n_states"]
#        ),
#        expand(rules.hmm_concordance_in.output,
#                interval = config["seconds_interval"],
#                variables = config["hmm_variables"],
#        ),
#        expand(rules.hmm_concordance_out.output,
#                interval = config["seconds_interval"],
#                variables = config["hmm_variables"],
#                n_states = config["n_states"]
#        ),
#        expand(rules.polar_plots.output,
#                interval = config["seconds_interval"],
#                variables = config["hmm_variables"],
#                n_states = config["n_states"]
#        ),
######################
## 02_param_optim.smk
######################
#        rules.compare_params.output,
######################
## 03_mapping.smk
######################
#        expand(rules.create_seq_sample_file.output,
#                run = config["runs"]
#        ),
#        expand(rules.samtools_index.output,
#                sample = SAMPLES
#        ),
#        expand(rules.get_coverage.output,
#                sample = SAMPLES
#        ),
#######################
### 04_F2_loci.smk
#######################
#        expand(rules.extract_parental_snps.output,
#                zip,
#                pat = PAT_UQ,
#                mat = MAT_UQ
#        ),
#        expand(rules.extract_homo_div_snps.output,
#                zip,
#                pat = PAT_UQ,
#                mat = MAT_UQ
#        ),
######################
## 05_F2_calling.smk
######################
#        expand(rules.bam_readcount_F2.output,
#                zip,
#                sample = SAMPLES_F2_ZIP,
#                pat = PAT_ZIP,
#                mat = MAT_ZIP
#        ),
#        expand(rules.make_hmm_input.output,
#                bin_length = config["bin_length"]
#        ),
#        expand(rules.true_hmmlearn.output,
#                bin_length = config["bin_length"],
#                cov = config["hmm_covariance"]
#        ),
#        expand(rules.split_HMM_genotyped_F2.output,
#                zip,
#                bin_length = [5000] * len(SAMPLES_F2_ZIP),
#                cov = [0.8] * len(SAMPLES_F2_ZIP),
#                sample = SAMPLES_F2_ZIP,
#                pat = PAT_ZIP,
#                mat = MAT_ZIP             
#        ),
        expand(rules.impute_F2_genos.output,
                zip,
                bin_length = [5000] * len(SAMPLES_F2_ZIP),
                cov = [0.8] * len(SAMPLES_F2_ZIP),
                sample = SAMPLES_F2_ZIP,
                pat = PAT_ZIP,
                mat = MAT_ZIP                   
        ),
        expand(rules.create_ped.output,
                bin_length = 5000,
                cov = 0.8
        ),
######################
## 05_KCC_calling.smk
######################
#        expand(rules.merge_variants.output),
######################
## 06_F0_state_freqg.smk
######################
#        expand(rules.state_freq_F0.output,
#                interval = 0.05,
#                variables = "dist_angle",
#                n_states = 15
#        ),
#        expand(rules.time_dependence_F0_all.output,
#                interval = 0.05,
#                variables = "dist_angle",
#                n_states = 15        
#        ),
######################
## 06_F2_state_freq.smk
######################
#        expand(rules.state_freq_F2.output,
#                interval = 0.05,
#                variables = "dist_angle",
#                n_states = 15,
#                dge_sge = config["dge_sge"],
#                state = list(range(1,16))
#        ),
######################
## 07_GCTA.smk
######################
#        expand(rules.create_bed.output,
#                bin_length = 5000,
#                cov = 0.8
#        ),
#        expand(rules.create_phen.output,
#                dge_sge = config["dge_sge"],
#                transformation = ["notrans", "invnorm"],
#                assay = ["open_field", "novel_object"],
#                state = list(range(1,16))
#        ),
#        expand(rules.permute_phen.output,
#                dge_sge = config["dge_sge"],
#                transformation = ["notrans", "invnorm"],
#                assay = ["open_field", "novel_object"],
#                state = list(range(1,16)),
#                seed = PERM_SEEDS
#        ),
#        expand(rules.create_covar.output,
#                covars = "All"
#        ),
#        expand(rules.permute_covars.output,
#                covars = "All",
#                seed = PERM_SEEDS
#        ),
#        expand(rules.run_mlma_loco.output,
#                bin_length = 5000,
#                cov = 0.8,
#                dge_sge = config["dge_sge"],
#                transformation = ["notrans", "invnorm"],
#                assay = ["open_field", "novel_object"],
#                state = list(range(1,16)),
#                covars = ["None", "All"]
#        ),
#        expand(rules.run_mlma_loco_permuted.output,
#                bin_length = 5000,
#                cov = 0.8,
#                dge_sge = config["dge_sge"],
#                transformation = ["notrans", "invnorm"],
#                assay = ["open_field", "novel_object"],
#                state = list(range(1,16)),
#                covars = ["None", "All"],
#                seed = PERM_SEEDS
#        ),
#        expand(rules.get_min_p_perms.output,
#                bin_length = 5000,
#                cov = 0.8,
#                dge_sge = config["dge_sge"],
#                transformation = ["notrans", "invnorm"],
#                assay = ["open_field", "novel_object"],
#                state = list(range(1,16)),
#                covars = ["None", "All"],
#        ),
#        expand(rules.get_manhattan_gcta.output,
#                bin_length = 5000,
#                cov = 0.8,
#                dge_sge = config["dge_sge"],
#                transformation = ["notrans", "invnorm"],
#                assay = ["open_field", "novel_object"],
#                state = list(range(1,16)),
#                covars = ["None", "All"],
#        ),
        expand(rules.make_grm.output,
                bin_length = 5000,
                cov = 0.8
        ),
        expand(rules.make_grm_inbred.output,
                bin_length = 5000,
                cov = 0.8
        ),
######################
## 08_figs.smk
######################
#        expand(rules.karyoplots.output,
#                bin_length = config["bin_length"],
#                cov = config["hmm_covariance"]
#        ),
        expand(rules.compile_sig_mans.output,
                bin_length = 5000,
                cov = 0.8,
                dge_sge = config["dge_sge"],
                transformation = ["notrans", "invnorm"],
                assay = ["open_field", "novel_object"],
                covars = ["None", "All"],
        ),
